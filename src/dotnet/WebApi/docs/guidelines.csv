Nr,Name,Definition,Elaboration,Instructions
1,Structured Statement,"Need statements and requirement statements must conform to one of the agreed patterns, thus resulting in a well-structured complete statement.",,"Identify the most commonly used pattern in the requirements and respond if the requirement follows that structure. The needs statement must have a the subject, the action and the reason in it. 
Yes is a pass and 
No is a fail / rewrite."
2,Active Moment,Use the active voice in the need statement or requirement statement with the responsible entity clearly identified as the subject of the sentence.,,Identify if it is clear who performs the action.
3, Appropriate Subject-Verb,Ensure the subject and verb of the need or requirement statement are appropriate to the entity to which the statement refers.,,
4,Defined Terms,Define all terms used within the need statement and requirement statement within an associated glossary and/or data dictionary,,
5,Definite Articles,Use the definite article “the” rather than the indefinite article “a”,,"Flag when ""a"" is used"
6,Common Units of Measure,"When stating quantities, all numbers should have appropriate and consistent units of measure explicitly stated using a common measurement system in terms of the thing the number refers.",,"Flag when inappropriate or inconsistent units of measure are used. 
Imperal units are to be considered inappropriate."
7,Vague Terms,Avoid the use of vague terms.,"Vague terms can lead to ambiguous, unverifiable needs and requirements where the true intent is not being communicated.
Avoid words that provide vague quantification, such as “some”, “any”, “allowable”, “several”,“many”, “a lot of”, “a few”, “almost always”, “very nearly”, “nearly”, “about”, “close to”, “almost” and “approximate”,
Avoid vague adjectives such as “ancillary”, ""relevant”, “routine”, “common”, “generic”, “significant”, “flexible”, “expandable”, “typical”, “sufficient”, “adequate”, “appropriate”, “efficient”, “effective”, “proficient”, “reasonable” and “customary.”
Adverbs qualify actions in some way and are particularly troublesome if vague. Avoid vague adverbs, such as “usually”, “approximately”, “sufficiently”, and “typically”, which can lead to ambiguous, unverifiable requirements that do not reflect accurately the stakeholder expectations.
As a general rule, words that end in “-ly” often result in ambiguity.",Non-compliance is an immediate red flag for the entire requirement
8,Escape Clauses,"Avoid the inclusion of escape clauses that state vague conditions or possibilities, such as “so far as is possible”, “as little as possible”, “where possible”, “as much as possible”, “if it should prove necessary”, “if necessary”, “to the extent necessary”, “as appropriate”, “as required”, “to the extent practical”, and “if practicable”.",,Non-compliance is an immediate red flag for the entire requirement
9,Open-Ended Clauses,"Avoid open-ended, non-specific clauses such as “including but not limited to”, “etc.” and “and so 
on”.","Open-ended clauses imply there is more required without stating exactly what. Open-ended clauses can lead to ambiguous, unverifiable needs and requirements that do not reflect accurately the stakeholder’s expectations and needs and can create ambiguity in the mind of the reader. Needs or requirements with open-ended clauses are not Complete (C4). Use of open-ended clauses also violates the one-thought rule (R18) that leads to the singular characteristic. If more cases are required, then include additional needs and requirements that explicitly state those cases. Depending on the contract type (fixed price versus level of effort or cost plus) open-ended requirements can lead to serious interpretation problems concerning what is in or out of scope of the contract; possibly resulting in expensive contract changes. For level of effort or cost-plus
contracts, open-ended requirements can be used by the supplier to do and bill the customer for additional work not intended by the customer leading to budget overruns and expensive contract changes.",Non-compliance is an immediate red flag for the entire requirement
10,Superfluous Infinitives,"Avoid the use of superfluous infinitives such as “to be designed to”, “to be able to”, “to be capable of”, “to enable”, “to allow”.","An infinitive is a verbal consisting of the word “to” + “a verb”.
Use of infinitives within requirement statements:
When writing a requirement statement, using more verbs than necessary to describe a single action (verb), such as “The <SOI> shall be designed to be able to <do an action> ...” or “The <SOI> shall be designed to be capable of <action>...” rather than simply “The <SOI> shall <action>...”.
By forcing conformance with one of the agreed structured statements (See R1), the use of such superfluous infinitives is avoided.
Note that at the enterprise and business levels, requirements for an entity to “provide a capability” are acceptable. Where capability is made up of people, processes, and products; these requirements will be decomposed to address the people aspects (skill set, training, roles, etc.), processes (procedures, work instructions, etc.); and products (hardware and software systems). 
The enterprise and business level higher-level requirements will be allocated appropriately to the people, processes, and products (SOI), as appropriate.
When the resulting requirement sets are defined for all three areas, the capability will be communicated by a set of requirements for each (people, process, product) that will result in the needed capability to be provided.",
11,Separate Clauses,Use a separate clause for each condition or qualification.,"Each need or requirement should have a main verb describing a basic function or need. If appropriate, the main sentence may then be supplemented by clauses that provide conditions or qualifications (performance values, trigger, or constraints). A single, clearly identifiable clause should be used for each condition or qualification expressed.
As mentioned in R1 and Appendix C, a need and requirement should match one, and only one, pattern from the catalog of agreed patterns.
If an applicable qualifying clause or condition is not stated explicitly within the need or requirement statement, the need or requirement statement is not Complete (C4), 
Verifiable/Validatable (C7), nor Correct (C8).
If a qualifying clause is not stated explicitly within the need or requirement statement, the need or requirement statement is not Complete (C4)), Verifiable/Validatable (C7), nor Correct (C8)—for example, performance associated with the action verb or for an interface requirement where a pointer to where the specific interaction is defined (such as in the ICD).
When using clauses, make sure the clause does not separate the object of the sentence from the verb. See also R1, R18, R27 and Appendix C.",Are separate clauses for each condition used?
12,Correct Grammer,Use correct grammar.,,"Is correct grammer used? With 1 or more grammer mistakes the reponse should be to ""review"""" (orange)"
13,Correct Spelling,Use correct spelling.,,"Is correct spelling used? With 1 or more spelling mistakes the reponse should be to ""review"""" (orange)"
14,Correct Punctuation,Use correct punctuation,"Incorrect punctuation can cause confusion between sub-clauses in a need or requirement statement.
A need or requirement statement with incorrect punctuation is not Correct (C8)
Note also that the more punctuation in a need or requirement statement, the greater the opportunity for ambiguity.
Many word processing applications are capable of applying a set of punctuation rules as text is entered based on a set of built-in rules that are selectable. When using an application specific set of punctuation rules, project-specific punctuation items may be flagged as incorrect as they may not be applicable to the project’s use of punctuation. Therefore, the application punctuation checking can be regarded as a project-specific aspect. Many applications allow the user to “turn off” or “ignore” punctuation rules that do not apply to the project","Is correct punctuation used? With 1 or more punctuation mistakes the reponse should be to ""review"""" (orange)"
15,Logical Expressions,"Use a defined convention to express logical expressions such as “[X AND Y]”, “[X OR Y]”, [X XOR Y]”, “NOT [X OR Y]”.","As with the other rules and characteristics, we want to keep requirement statements as one thought with singular statements. Thus, we avoid using “and” when it involves tying two thoughts together. However, it is acceptable to use “AND”, “OR”, “XOR”, and “NOT” in a logical sense when talking about conditions to which the verb applies. All logical expressions decompose to either “true” or “false”, resulting in a singular statement.
Examples of conventions:
1. Place conjunctions in italics or in all capitals (AND, OR, XOR, NOT) to indicate that the author intends the conjunction to play a role in a condition.
2. Place conditions within square brackets, also using the brackets to control their scope.
For example, “[X AND Y].”
Further, use of “and/or” is non-specific and therefore ambiguous. The most common interpretation of the expression “and/or” is as an inclusive OR: either X OR Y OR both. 
• If an inclusive OR is intended, that should be written as “at least one of <the two or more requirements>”. 
• If an Exclusive OR is intended, that should be written as “Either <Requirement 1> OR <Requirement 2> but NOT both”, and similar wording.
Note that caution should be used when including logical expressions in requirement statements. 
In many cases the use of logical expressions is more appropriate to design output specifications/requirements. Design Input Requirements should focus on why the logical actions 
are needed - prevent something bad from happening, for example, The use of logical expressions within requirement statements is appropriate when stating “under what conditions” apply to a need or requirement. For example, an action that must take place based on whether at logical condition is true or false.",
16,"Use of ""Not""",Avoid the use of the word “not”.,"The presence of the word “not” in a need statement or requirement statement implies “not ever”,  which is impossible to verify in a finite time, in which case, the need statement or requirement 
statement is not correct (C8).
In theory, there is a large number of actions the system should not do. Such statements should be re-written in the positive—that is, referring to what the entity is to do, rather than what it is not to do.
Rewriting the need statement or requirement statement to avoid the use of “not” results in a need or statement requirement statement that is clearer and is verifiable/validatable (C7)","Flag when the word ""not"" is used"
17,Use of the oblique (“/”) symbol,Avoid the use of the oblique (“/”) symbol.,"The oblique symbol (“/”), or “slash”, has so many possible meanings that it should be avoided. 
The slash symbol (such as in “user/operator”, “budget/schedule” or the construct “and/or” (discussed in R15) can lead to ambiguous statements that do not reflect accurately the true 
stakeholder needs or lifecycle concepts from which the needs in the Integrated Set of Needs were derived. ","If the oblique (""/"") symbol is used response should to ""review"" (orange)"
18,Single Thought Sentence,Write a single sentence that contains a single thought conditioned and qualified by relevant subclauses.,"Need statements and requirement statements (based on the concepts of allocation, traceability, validation, and verification) must contain a single thought allowing:
• needs to be traced to their source;
• the single thought within a requirement statement to be allocated;
• the resulting single-thought child requirements to trace to their allocated parent,
• requirements to trace to a single-thought source;
• design and system validation and design and system verification against the single-thought need or requirement.
Sometimes a need statement or requirement statement is only applicable under a specific trigger,  condition, or multiple conditions as discussed in Section 1.11. 
If multiple actions are needed for a single condition, each action should be repeated in the text of a separate need statement or requirement statement along with the triggering condition, rather than stating the condition and then listing the multiple actions to be taken. Using this convention, the system can be verified to perform each action, and each action can be separately allocated to the entities at the next level of the architecture.
Also avoid stating the condition or trigger for an action in a separate sentence. Instead write a simple affirmative declarative sentence with a single subject, a single main action verb and a single object, framed and qualified by one or more sub-clauses.
Avoid compound sentences containing more than one subject/verb/object sequence. This constraint is enforced in the catalog of agreed patterns (see R1 and Appendix C).
Often when there are multiple sentences for one requirement, the writer is using the second sentence to communicate the conditions for use or rationale for the requirement for the first  sentence. This practice is not acceptable—rather include rationale in the attribute A1 - Rationale as part of the requirement expression and include the condition of use within the need statement or requirement statement or an attribute within the need or requirement expression.
See also R1, R11, R27, and R28.",
19,Combinators,"Avoid words that join or combine clauses, such as “and”, “or”, “then”, “unless”, “but”, “as well as”, “but also”, “however”, “whether”, “meanwhile”, “whereas”, “on the other hand”, or “otherwise”.","The presence of such combinators in a statement usually indicates that multiple thoughts are  contained within the statement violating rule R18. 
To address these instances, either a logical expression is warranted (rule R15) or the statement  must be broken into separate need or requirement statements, each containing a single thought.",
20,Purpose Phrases,"Avoid phrases that indicate the “purpose of “, “intent of”, or “reason for” the need statement or requirement statement.","Need statements and requirement statements should be as concise as possible and be Complete (C4). In an attempt to avoid ambiguity or communicate why the need or requirement is Necessary (C1), some writers include additional information to make the purpose, intent, and reason clearer by including additional text within the need statement or requirement statement or include an additional sentence of explanation immediately following the need statement or requirement statement. 
The text of a need statement or requirement statement should not include this extra text, nor should an additional sentence be included as part of the need or requirement statements.
Expressions of purpose or intent are often indicated by the presence of phrases such as “……to”, “in order to”, “so that”, and “thus allowing.”
This rule does not mean to imply that the additional information with regard to purpose is superfluous and should not be included at all. On the contrary, this extra information is useful to readers of a statement, but it should not be included in the statement; rather it should be included separately in the need expression or requirement expression using the Rationale attribute (A1) as discussed in the NRM.",
21,Parenthesis,Avoid parentheses and brackets containing subordinate text.,"If the text of a need statement or requirement statement contains parentheses or brackets, it usually indicates the presence of superfluous information that can simply be removed or can be communicated in the rationale. Other times, brackets introduce ambiguity.
If the information in the parentheses or brackets aids in the understanding of the intent of the requirement, then that information should be included in the Rationale Attribute (A1) defined in the NRM.
Conventions for the use of parentheses or brackets may be agreed upon for specific purposes.
Such conventions should be documented in the project’s requirements and work instructions concerning defining needs and requirements.",
22,Enumeration,Enumerate sets explicitly instead of using a group noun to name the set.,"If a number of functions are implied, a need statement or requirement statement should be written for each.
The use of a group noun to combine functions or entities is often ambiguous because it leaves membership of that group in doubt. 
Other issues include allocation, traceability, verification, and validation. As with the singularity characteristic C5, each member of the set could be allocated differently, have different child requirements, each of which must be individually verified and validated.
It is almost always best to list all the members of the set as separate needs or requirements. See exceptions and relationship discussion below.
See also R18.",
23,"Support Diagram, Model or ICD","When a need or requirement is related to complex behavior, refer to a supporting diagram, model, or ICD.","Sometimes it can be difficult to express a complicated need or requirement in words, and it is better simply to refer to a supporting diagram or model. 
An example is a requirement on voltage at turn on which involves a magnitude, rise time, overshoot, and dampening time along with tolerances. Stating all these values in the same requirement could be seen to violate our combiner and multiple thought rules.
Having a requirement that states: “Upon turn on, the <SOI> shall supply the initial voltage with the characteristics shown in Drawing xxxxx.” It is much simpler for the drawing to show the magnitude, rise time, allowable overshoot, and dampening time. Stating each as a separate requirement is not applicable because all four conditions are part of the one action.
This approach may seem to violate the singularity rule in that the SOI will need to be verified against each value in the drawing or figure. Because of this, an organization may choose to address each value in a separate requirement with the requirement or rationale referring to the diagram or drawing for context.
When multiple characteristics for an entity involved in an interaction between two systems, these characteristics can be defined in an ICD which is referred to within the requirement statement for each entity involved in the interactions, for example electrical power passing across an interface boundary can have multiple characteristics that must be define. (See example below for interfaces).
When using figures and models, care must be taken to not make matters worse but using disparate modelling languages and different terms in figures from those used in the statements.
R36 applies here to ensure consistency in terms, not just across the sets of need and sets of requirements but also across all associated models, figures, and diagrams.",
24,Pronouns,Avoid the use of personal and indefinite pronouns.,"Pronouns are words such as “it”, “this”, “that”, “he”, “she”, “they”, and “them.” 
Repeat nouns in full instead of using pronouns to refer to nouns included in the need statement or requirement statement or other need statements or requirement statements.
When authoring stories, pronouns are a useful device for avoiding the repetition of nouns; but when writing need statements and requirement statements, pronouns are effectively crossreferences to nouns included within the need statement or requirement statement or other need statements or requirement statements and, as such, are ambiguous and should be avoided.
When originally written, the noun that defines the pronoun may have preceded the pronounpreviously used in the need statement or requirement statement or in a previous need statement or requirement statement. 
However, as the set of needs or set of requirements mature, individual needs or requirements may be added, deleted, reordered, or regrouped, such that the defining need or requirement no longer precedes the need or requirement containing the pronoun. This is especially true when requirements are stored in a requirement management tool where they exist as single statements in a database that may not be in order. To avoid these problems, repeat the proper nouns rather than using a pronoun.
Indefinite pronouns are words such as “all”, “another”, “any”, “anybody”, “anything”, “both”, “each”,
“either”, “every”, “everybody”, “everyone”, “everything”, “few”, “many”, “most”, “much”, “neither”,
“no one”, “nobody”, “none”, “one”, “several”, “some”, “somebody”, “someone”, “something”, and 
“such.” 
Indefinite pronouns stand in for unnamed people or things, which makes their meaning subject to interpretation, ambiguous, and unverifiable.
See also R32 and R36",
25,Headings,Avoid relying on headings to support explanation or understanding of the need or requirement.,"It is a common mistake in document-centric documentation of needs and requirements to use the heading for a specific topic or subject under which the need or requirement applies to contribute to the explanation of the need or requirement. The need expression or requirement expression should be complete in and of itself and not require the heading for the intent of the expression to be clearly understood.
Use of a heading can be avoided when using a data-centric approach to SE where sets of needs and requirements are developed and managed using a modern RMT or other SE tool rather than a legacy tool that is document-centric which organizes needs and requirements within sections and paragraphs of a document","The requirement needs to be clear without the need of a supporting heading. 
Flag as ""rewrite"" (red) when the requirement relies on the heading or would be improved when using the heading in the requirement itself."
26,Absolutes,Avoid using unachievable absolutes.,"An absolute, such as “100% availability”, is not achievable. Think ahead to design and system verification and design and system validation: how 100% availability be proven? Even if such a system could be built, could the project afford to validate, or it meets the need or requirement?
Other examples to avoid are “all”, “every”, “always”, and “never” since such absolutes are impossible to verify without an infinite number of verification or validation activities.
A need or requirement that contains absolutes is neither Feasible (C6), Verifiable/Validatable (C7), nor Correct (C8).",
27,Explicit Conditions,State conditions’ applicability explicitly instead of leaving applicability to be inferred from the context.,"Sometimes needs or requirements are only applicable under certain conditions and multiple actions may need to be taken when a given condition exists. In these cases, the condition should be repeated in the text of each need statement or requirement statement, rather than stating the condition and then listing the actions to be taken. This will enable verification of each action occurring when the condition exists and identifying any specific action that fails to occur and resolving that issue specifically.
As presented in R1, and described in more detail in Appendix C, some common applicability conditions include event-driven requirements, state-driven requirements, optional features requirements, or unwanted behavior requirements. Furthermore, some of those applicability conditions can be mixed together ending up into a more complex yet complete structure (mixing a while statement to refer to a given state, and when statement to refer to a trigger is common in many system requirements).
If a condition that applies to a need or requirement is not stated explicitly within the need or requirement statement, the need or requirement statement is not Complete (C4), Verifiable/Validatable (C7), nor Correct (C8) unless the condition clause is included.
Needs are communicated at a higher level of abstraction, often concerning an overall capability of the system, as such they can be ubiquitous at this level of abstraction and are often stated without any specific conditions. However, if a specific condition is applicable, it should be included within the need statement to ensure the intent clear.
See also R1, R11, R18 and Appendix C.",
28,Multiple Conditions,Express the propositional nature of a condition explicitly for a single action instead of giving lists of actions for a specific condition.,"Sometimes a given action is to be performed based on the existence of multiple conditions or a combination of one or more conditions. When multiple conditions are listed for a single action in a single requirement statement, it may not be clear whether all the conditions must hold (a conjunction) or any one of them (a disjunction) for the action to take place.
The wording of the requirement should make this clear in order to avoid ambiguity but also to facilitate verification the system performs each of the individual actions as specified.
When the combination of multiple conditions that trigger an action is complex, consideration should be given to the use of a diagram or table (see R23).
Needs are communicated at a higher level of abstraction often concerning an overall capability of the system, as such they are ubiquitous at this level of abstraction and are often stated without any specific conditions.",
29,Classification,Classify needs and requirements according to the aspects of the problem or system it addresses.,"By classifying needs or requirements by type or category, it is possible to group or sort requirements to help identify potential duplications and conflicts within a given type or category. 
The ability to view specific groups of needs or requirements can also assist in identifying what needs or requirements may be missing helping to address the characteristic of completeness (C10) as associated with the set of needs or set of requirements.
It is useful to assign to each need statement and requirement statement an attribute associated with its type or category. (See NRM for more guidance on organizing needs and requirements and the use of Attribute A 40 - type/category). 
Examples of types or categories of needs and requirements include form, fit, function/performance, quality (-ilities), and compliance (standards and regulations). These can be further grouped in to sub types or categories. Refer to the NRM Sections 4 and 6 for a detailed discussion concerning organizing needs and requirements.
The type/category attribute is most useful because it allows the needs and requirements database to be viewed by a number of designers and stakeholders for a wide range of users. For example, maintainers could review the database filtering out all but the maintenance requirements, engineers developing test plans could filter and extract all verification requirements, and so on. To that end then, the organization would choose types or categories that are useful for the management of their need or requirement set tailored to their specific product line and processes. As discussed in the NRM, the use of attributes allows reports to be generated for all needs or requirements of a certain type or category, allowing the identification of dependencies, duplication, conflicts, or absence of requirements.
Each different type might be related to one or a few different patterns in the catalog of agreed patterns.
The classification used for needs and requirements is defined at organization or project level. The classification schema should be defined as part of the project data dictionary. 
How an organization organizes needs and requirements should be clearly defined in the organization’s process documents and associated templates for organizing sets of needs and requirements. 
Examples:
Example classifications: Functional, Performance, Operational, Reliability, Availability, Maintainability, S",
30,Unique Expression,,,
31,Solution Free,,,
32,Universal Qualification,,,
33,Range of Values,,,
34,Measurable Performance,,,
35,Temporal Dependencies,,,
36,Consistent Terms and Units,,,
37,Acronyms,,,
38,Abbreviations,,,
39,Style Guide,,,
40,Decimal Format,,,
41,Related Needs & Requirements,,,
42,Structured Set,,,
